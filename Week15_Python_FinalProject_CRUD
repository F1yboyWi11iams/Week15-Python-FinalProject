import sqlite3

def create_db():
    conn = sqlite3.connect('students.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS students (
        student_id INTEGER PRIMARY KEY,
        full_name TEXT NOT NULL,
        age INTEGER,
        gender TEXT,
        email TEXT,
        address TEXT,
        phone TEXT,
        date_of_birth TEXT
        )
        ''')
        conn.commit()
    except sqlite3.Error as err:
        print("Error creating the table: ", err)
    finally:
        conn.close()

MIN_CHOICE = 1
MAX_CHOICE = 5
CREATE = 1
READ = 2
UPDATE = 3
DELETE = 4
EXIT = 5

def main():
    choice = 0
    while choice != EXIT:
        display_menu()
        choice = get_menu_choice()

        if choice == CREATE:
            create()
        elif choice == READ:
            read()
        elif choice == UPDATE:
            update()
        elif choice == DELETE:
            delete()

def display_menu():
    print('\n----- Student Information Menu -----')
    print('1. Enter new student information')
    print('2. Read student information')
    print('3. Update student information')
    print('4. Delete student information')
    print('5. Exit the program')

def get_menu_choice():
    while True:
        try:
            choice = int(input('Enter your choice: '))
            if MIN_CHOICE <= choice <= MAX_CHOICE:
                return choice
            else:
                print(f'Valid choices are {MIN_CHOICE} through {MAX_CHOICE}.')
        except ValueError:
            print('Invalid input! Please enter a number from 1 to 5.')

def create():
    print('Create New Student Information')
    student_id = input('Student ID Number: ')
    full_name = input('Student Full Name: ')
    age = input('Student Age: ')
    gender = input('Student Gender at Birth: ')
    email = input('Student Email: ')
    address = input('Student Home Address: ')
    phone = input('Student Phone Number: ')
    date_of_birth = input('Student Date of Birth (YYYY-MM-DD): ')
    try:
        age = int(age)
    except ValueError:
        print("Invalid Age entered! Age must be a number.")
        return
    insert_row(student_id, full_name, age, gender, email, address, phone, date_of_birth)

def read():
    student_name = input('Enter a student name to search for: ')
    num_found = display_item(student_name)
    print(f'{num_found} row(s) found.')

def update():
    read()

    student_id = int(input('Select a Student ID to update: '))
    try:
        student_id = int(student_id)
    except ValueError:
        print('Invalid Student ID! Must be a number.')
        return
    full_name = input('Enter the new student full name: ')
    age = input('Enter the new student age: ')
    email = input('Enter the new student email: ')
    address = input('Enter the new student address: ')
    phone = input('Enter the new student phone number: ')
    date_of_birth = input('Enter the new student date of birth (YYYY-MM-DD): ')

    try:
        age = int(age)
    except ValueError:
        print('Invalid age entered! Age must be a number.')
        return

    num_updated = update_row(student_id, full_name, age, email, address, phone, date_of_birth)
    if numb_updated:
        print(f'{num_updated} student(s) updated.')
    else:
        print('No updates were made.')

def delete():
    read()

    student_id = int(input('Select student ID to delete: '))
    try:
        student_id = int(student_id)
    except ValueError:
        print('Invalid Student ID! It must be a number.')
        return

    sure = input("Are you sure you want to delete this student information? (y/n): ")
    if sure.lower() == 'y':
        num_deleted = delete_students(student_id)
        print(f'{num_deleted} Student Information deleted.')
    else:
        print("Deletion canceled.")

def insert_row(full_name, age, email, address, phone, date_of_birth):
    conn = None
    try:
        conn = sqlite3.connect('students.db')
        cur = conn.cursor()
        print(f'Inserting: {full_name}, {age}, {gender}, {email}, {address}, {phone}, {date_of_birth}')
        cur.execute('''INSERT INTO students (full_name, age, email, address, phone, date_of_birth)
        VALUES (?, ?, ?, ?, ?, ?, ?)''',
                    (full_name, age, email, address, phone, date_of_birth))
        conn.commit()
        print('New student information added.')
    except sqlite3.Error as err:
        print('Error while inserting data: ', err)
    finally:
        if conn:
            conn.close()

def display_item(name):
    conn = None
    results = []
    try:
        conn = sqlite3.connect('students.db')
        cur = conn.cursor()
        cur.execute('''SELECT * FROM students
        WHERE lower(full_name) == ?''',
                    (name.lower(),))
        results = cur.fetchall()

        for row in results:
            print(f'student_id: {row[0]:<7} full_name: {row[1]:<21} '
                  f'age: {row[2]:<10} email: {row[3]:<30} address: {row[4]:<14} phone: {row[5]:<42} date_of_birth: {row[7]}')
    except sqlite3.Error as err:
        print('Database Error: ', err)
    finally:
        if conn:
            conn.close()
    return len(results)

def update_row(student_id, full_name, age, email, address, phone, date_of_birth):
    conn = None
    try:
        conn = sqlite3.connect('students.db')
        cur = conn.cursor()
        cur.execute('''UPDATE students
        SET full_name = ?, age = ?, email = ?, address = ?, phone = ?, date_of_birth = ?
        WHERE student_id == ?''',
                    (full_name, age, email, address, phone, date_of_birth, student_id))
        conn.commit()
        return cur.rowcount
    except sqlite3.Error as err:
        print('Database Error: ', err)
        return 0
    finally:
        if conn:
            conn.close()

def delete_students(student_id):
    conn = None
    try:
        conn = sqlite3.connect('students.db')
        cur = conn.cursor()
        cur.execute('''DELETE FROM students
        WHERE student_id = ?''',
                    (student_id,))
        conn.commit()
        return cur.rowcount
    except sqlite3.Error as err:
        print('Database Error: ', err)
        return 0
    finally:
        if conn:
            conn.close()


if __name__ == '__main__':
    main()
